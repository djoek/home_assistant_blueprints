blueprint:
  name: iluminize ZG2819S-RGBW
  source_url: https://github.com/djoek/home_assistant_blueprints/blob/master/iluminize_ZG2819S_RGBW.yaml
  description: Control lights with a iluminize 511.344 RGBW Remote
  domain: automation
  input:
    remote:
      name: Remote
      description: iluminize 511.344 remote to use
      selector:
        device:
          integration: zha
          manufacturer: iIuminize
          model: ZG2819S-RGBW
          multiple: false
          
    target_light:
      name: Light(s)
      description: The light(s) to control
      selector:
        target:
          entity:
          - domain:
            - light

    scene_1:
      name: ButtonS1
      description: The scene to be triggered when S1 button is pressed
      selector:
        entity:
          domain:
          - scene
          multiple: false
    scene_2:
      name: ButtonS2
      description: The scene to be triggered when S2 is pressed
      selector:
        entity:
          domain:
          - scene
          multiple: false
    scene_3:
      name: ButtonS3
      description: The scene to be triggered when S3 is pressed
      selector:
        entity:
          domain:
          - scene
          multiple: false


mode: restart
max_exceeded: silent

  
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input remote
    
action:

- choose:
  - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.command == "on" }}'
    sequence:
    - service: light.turn_on
      target: !input 'target_light'

        
  - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.command == "off" }}'
    sequence:
    - service: light.turn_off
      target: !input 'target_light'
      
  - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.command == "move_to_color" }}'
    sequence:
    - service: light.turn_on
      target: !input 'target_light'
      data:
        xy_color:
        - '{{ trigger.event.data.params.color_x /100000 }}'
        - '{{ trigger.event.data.params.color_y /100000 }}'
      
  - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.command == "move_to_color_temp" }}'
    sequence:
    - service: light.turn_on
      target: !input 'target_light'
      data:
        color_temp: '{{ trigger.event.data.params.color_temp_mireds }}'
        transition: '{{ trigger.event.data.params.transition_time }}'

  - conditions:
      - condition: and
        conditions: 
        - '{{ trigger.event.data.command == "step_with_on_off" }}'
        - '{{ trigger.event.data.params.step_mode == 0 }}'
    sequence:
    - service: light.turn_on
      target: !input 'target_light'
      data:
        brightness_step: '{{ trigger.event.data.params.step_size }}'
      
  - conditions:
      - condition: and
        conditions: 
        - '{{ trigger.event.data.command == "step_with_on_off" }}'
        - '{{ trigger.event.data.params.step_mode == 1 }}'
    sequence:
    - service: light.turn_on
      target: !input 'target_light'
      data:
        brightness_step: '{{ trigger.event.data.params.step_size * -1}}'
        
        
        
        
        

  - conditions:
      - condition: and
        conditions: 
        - '{{ trigger.event.data.command == "recall" }}'
        - '{{ trigger.event.data.params.scene_id == 1 }}'
    sequence:
    - service: scene.turn_on
      target:
        entity_id: !input 'scene_1'
        
  - conditions:
      - condition: and
        conditions: 
        - '{{ trigger.event.data.command == "recall" }}'
        - '{{ trigger.event.data.params.scene_id == 2 }}'
    sequence:
    - service: scene.turn_on
      target:
        entity_id: !input 'scene_2'
      
  - conditions:
      - condition: and
        conditions: 
        - '{{ trigger.event.data.command == "recall" }}'
        - '{{ trigger.event.data.params.scene_id == 3 }}'
    sequence:
    - service: scene.turn_on
      target:
        entity_id: !input 'scene_3'